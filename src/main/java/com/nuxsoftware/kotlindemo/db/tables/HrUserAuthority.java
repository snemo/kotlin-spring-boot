/*
 * This file is generated by jOOQ.
*/
package com.nuxsoftware.kotlindemo.db.tables;


import com.nuxsoftware.kotlindemo.db.Indexes;
import com.nuxsoftware.kotlindemo.db.Keys;
import com.nuxsoftware.kotlindemo.db.Public;
import com.nuxsoftware.kotlindemo.db.tables.records.HrUserAuthorityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HrUserAuthority extends TableImpl<HrUserAuthorityRecord> {

    private static final long serialVersionUID = 560748191;

    /**
     * The reference instance of <code>PUBLIC.HR_USER_AUTHORITY</code>
     */
    public static final HrUserAuthority HR_USER_AUTHORITY = new HrUserAuthority();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HrUserAuthorityRecord> getRecordType() {
        return HrUserAuthorityRecord.class;
    }

    /**
     * The column <code>PUBLIC.HR_USER_AUTHORITY.HR_USER_ID</code>.
     */
    public final TableField<HrUserAuthorityRecord, Long> HR_USER_ID = createField("HR_USER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.HR_USER_AUTHORITY.AUTHORITY_NAME</code>.
     */
    public final TableField<HrUserAuthorityRecord, String> AUTHORITY_NAME = createField("AUTHORITY_NAME", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.HR_USER_AUTHORITY</code> table reference
     */
    public HrUserAuthority() {
        this(DSL.name("HR_USER_AUTHORITY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.HR_USER_AUTHORITY</code> table reference
     */
    public HrUserAuthority(String alias) {
        this(DSL.name(alias), HR_USER_AUTHORITY);
    }

    /**
     * Create an aliased <code>PUBLIC.HR_USER_AUTHORITY</code> table reference
     */
    public HrUserAuthority(Name alias) {
        this(alias, HR_USER_AUTHORITY);
    }

    private HrUserAuthority(Name alias, Table<HrUserAuthorityRecord> aliased) {
        this(alias, aliased, null);
    }

    private HrUserAuthority(Name alias, Table<HrUserAuthorityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_AUTHORITY_NAME_INDEX_5, Indexes.FK_USER_ID_INDEX_5, Indexes.PRIMARY_KEY_5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<HrUserAuthorityRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<HrUserAuthorityRecord>> getKeys() {
        return Arrays.<UniqueKey<HrUserAuthorityRecord>>asList(Keys.CONSTRAINT_5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<HrUserAuthorityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HrUserAuthorityRecord, ?>>asList(Keys.FK_USER_ID, Keys.FK_AUTHORITY_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HrUserAuthority as(String alias) {
        return new HrUserAuthority(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HrUserAuthority as(Name alias) {
        return new HrUserAuthority(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HrUserAuthority rename(String name) {
        return new HrUserAuthority(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HrUserAuthority rename(Name name) {
        return new HrUserAuthority(name, null);
    }
}
