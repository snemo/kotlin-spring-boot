/*
 * This file is generated by jOOQ.
*/
package com.nuxsoftware.kotlindemo.db.tables;


import com.nuxsoftware.kotlindemo.db.Indexes;
import com.nuxsoftware.kotlindemo.db.Keys;
import com.nuxsoftware.kotlindemo.db.Public;
import com.nuxsoftware.kotlindemo.db.tables.records.AuthorityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authority extends TableImpl<AuthorityRecord> {

    private static final long serialVersionUID = -698285345;

    /**
     * The reference instance of <code>PUBLIC.AUTHORITY</code>
     */
    public static final Authority AUTHORITY = new Authority();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorityRecord> getRecordType() {
        return AuthorityRecord.class;
    }

    /**
     * The column <code>PUBLIC.AUTHORITY.NAME</code>.
     */
    public final TableField<AuthorityRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.AUTHORITY</code> table reference
     */
    public Authority() {
        this(DSL.name("AUTHORITY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.AUTHORITY</code> table reference
     */
    public Authority(String alias) {
        this(DSL.name(alias), AUTHORITY);
    }

    /**
     * Create an aliased <code>PUBLIC.AUTHORITY</code> table reference
     */
    public Authority(Name alias) {
        this(alias, AUTHORITY);
    }

    private Authority(Name alias, Table<AuthorityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Authority(Name alias, Table<AuthorityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthorityRecord> getPrimaryKey() {
        return Keys.PK_AUTHORITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthorityRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorityRecord>>asList(Keys.PK_AUTHORITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authority as(String alias) {
        return new Authority(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Authority as(Name alias) {
        return new Authority(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Authority rename(String name) {
        return new Authority(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Authority rename(Name name) {
        return new Authority(name, null);
    }
}
